@layout AuthLayout
@page "/cart/payment"
@using EccomercePage.Api.Interfaces
@using EccomercePage.Api.Repository
@using EccomercePage.Api.Repository.States
@using EccomercePage.Components.Order
@using EccomercePage.Data.DTO.CartDTO
@using EccomercePage.Routes.Redirects
@using Microsoft.AspNetCore.Components.Authorization

@inject CartState CartState
@inject ICartRepository _cartRepository
@inject IGetService<PaymentMethodDTO> _paymentMethodService
@inject IOrderService _orderService
@inject NavigationManager Navigation

<AuthorizeView>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        <section class="flex max-w-full flex-row bg-gray-400">
            <div class="flex-grow-2 basis-2/3 bg-red-300">
                <div>
                    @foreach (var item in cartItemsPaymentDTO.CartItems)
                    {
                        <CartProductItemPayment ImageSrc="@item.ImageUrl"
                                                Name="@item.ProductName"
                                                Quantity="@item.Quantity" />
                    }
                </div>
                <div class="flex gap-x-4">
                    @foreach (var paymentMethod in paymentMethods)
                    {
                        <PaymentMethodItem Id="@paymentMethod.Id"
                                           Name="@paymentMethod.Name"
                                           Description="@paymentMethod.Description"
                                           Value="@SelectedPaymentMethodId"
                                           ValueChanged="OnPaymentMethodChanged" />
                    }
                </div>

            </div>
            <div class="flex-grow-1 basis-1/3 bg-blue-300">
                <PurchaseSummary Total="@total"
                                 TotalProducts="@CartState.CartItems" />
                <button @onclick="GenerateOrder">Generar pedido</button>
            </div>
        </section>
    </Authorized>
</AuthorizeView>

@code {
    private CartItemsPaymentDTO cartItemsPaymentDTO = new CartItemsPaymentDTO();
    private IEnumerable<PaymentMethodDTO> paymentMethods = [];
    private decimal total;

    private int SelectedPaymentMethodId;

    protected override async Task OnInitializedAsync()
    {
        CartState.OnChange += StateHasChanged;
        await _cartRepository.UpdateCartStateAsync();
        total = await _cartRepository.GetTotalAmountAsync();
        cartItemsPaymentDTO = await _cartRepository.GetCartItemsPaymentAsync();
        paymentMethods = await _paymentMethodService.GetAllAsync();

        // Seleccionar el primer método de pago automáticamente si existen métodos
        if (paymentMethods?.Any() == true)
        {
            SelectedPaymentMethodId = paymentMethods.First().Id;
        }
    }

    private void OnPaymentMethodChanged(int selectedId)
    {
        SelectedPaymentMethodId = selectedId;
    }

    private async void GenerateOrder()
    {
        if (SelectedPaymentMethodId == 0)
        {
            return;
        }

        if (cartItemsPaymentDTO.Id == 0)
        {
            return;
        }

        var result = await _orderService.GenerateOrderThroughCart(cartItemsPaymentDTO.Id, SelectedPaymentMethodId);

        if (result)
        {
            await _cartRepository.UpdateCartStateAsync();
            Navigation.NavigateTo("/");
        }

    }

    public void Dispose()
    {
        CartState.OnChange -= StateHasChanged;
    }
}
