@page "/cart"

@using EccomercePage.Api.Repository
@using EccomercePage.Api.Repository.States
@using EccomercePage.Components.Order
@using EccomercePage.Data.DTO.CartDTO
@using EccomercePage.Routes.Redirects
@using Microsoft.AspNetCore.Components.Authorization

@inject CartResumenState _cartResumenState
@inject ICartRepository _cartRepository

<AuthorizeView>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        <section class="flex max-w-full flex-row bg-gray-400">
            <div class="flex-grow-2 basis-2/3 bg-red-300">
                @foreach (var item in _cartResumenState.CartResume.CartItems)
                {
                    <CartProductCard ProductId="item.ProductId"
                                     CartItemId="item.Id"
                                     ImageSrc="@item.ImageUrl"
                                     Name="@item.ProductName"
                                     TotalPrice="item.Total"
                                     Quantity="item.Quantity"
                                     ExistenceQuantity="item.ExistentQuantity"
                                     OnQuantityChanged="HandleQuantityChange" />
                }
            </div>
            <div class="flex-grow-1 basis-1/3 bg-blue-300">
                <PurchaseSummary Total="@_cartResumenState.CartResume.Total"
                                 TotalProducts="@_cartResumenState.CartResume.CartItems.Sum(ci => ci.Quantity)" />
                <NavLink href="/cart/userdetails">Continuar con la compra</NavLink>
            </div>
        </section>
    </Authorized>
</AuthorizeView>

@code {
    private CartResumeDTO cartResume = new CartResumeDTO();

    protected override async Task OnInitializedAsync()
    {
        _cartResumenState.OnChange += StateHasChanged;
        await _cartRepository.UpdateCartResumeStateAsycn();
    }

    private async void HandleQuantityChange(ChangeItemQuantityDTO args)
    {
        await _cartRepository.ChangeItemQuantity(args);
    }
}
