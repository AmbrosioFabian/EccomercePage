@page "/cart"

@using EccomercePage.Api.Repository
@using EccomercePage.Api.Repository.States
@using EccomercePage.Components.Order
@using EccomercePage.Data.DTO.CartDTO
@using EccomercePage.Routes.Redirects
@using Microsoft.AspNetCore.Components.Authorization

@inject CartResumenState _cartResumenState
@inject ICartRepository _cartRepository

<AuthorizeView>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        <section style="display: flex; max-width: 1200px; margin: auto; padding: 20px;">
            <div style="flex: 2; background-color: #f9f9f9; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                @foreach (var item in _cartResumenState.CartResume.CartItems)
                {
                    <CartProductCard ProductId="item.ProductId"
                                     CartItemId="item.Id"
                                     ImageSrc="@item.ImageUrl"
                                     Name="@item.ProductName"
                                     TotalPrice="item.Total"
                                     Quantity="item.Quantity"
                                     ExistenceQuantity="item.ExistentQuantity"
                                     OnQuantityChanged="HandleQuantityChange" />
                }
            </div>
            <div style="flex: 1; background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); margin-left: 20px;">
                <PurchaseSummary Total="@_cartResumenState.CartResume.Total"
                                 TotalProducts="@_cartResumenState.CartResume.CartItems.Sum(ci => ci.Quantity)" />
                <NavLink href="/cart/userdetails" style="display: inline-block; padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 5px; text-decoration: none; margin-top: 20px;">Continuar con la compra</NavLink>
            </div>
        </section>
    </Authorized>
</AuthorizeView>

@code {
    private CartResumeDTO cartResume = new CartResumeDTO();

    protected override async Task OnInitializedAsync()
    {
        _cartResumenState.OnChange += StateHasChanged;
        await _cartRepository.UpdateCartResumeStateAsycn();
    }

    private async void HandleQuantityChange(ChangeItemQuantityDTO args)
    {
        await _cartRepository.ChangeItemQuantity(args);
    }
}
