@layout AuthLayout
@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using EccomercePage.Api.Interfaces
@using EccomercePage.Data.DTO
@using EccomercePage.Data.Validations
@using EccomercePage.Routes.Redirects
@using FluentValidation
@using FluentValidation.Results

@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject IValidator<LoginDTO> LoginValidator

<AuthorizeView>
    <Authorized>
        <RedirectToHome />
    </Authorized>
    <NotAuthorized>
        <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh; background: linear-gradient(170deg, #0a0000, #08113d, #0a0000);">
            <div style="width: 100%; max-width: 400px; padding: 2rem; border-radius: 8px;
                        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
                        background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px);">
                <h3 style="text-align: center; color: #fff; font-weight: bold; margin-bottom: 1.5rem;">Iniciar Sesión</h3>

                <EditForm Model="@LoginDTO" OnValidSubmit="HandleValidSubmit" Context="editFormContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div style="margin-bottom: 1.5rem;">
                        <InputText id="userName" @bind-Value="LoginDTO.UserNameOrEmail" placeholder="Nombre de usuario"
                                   style="width: 100%; padding: 0.75rem; border: none; border-radius: 5px; background: rgba(255, 255, 255, 0.2); color: #fff; font-size: 16px; outline: none;" />
                    </div>
                    <div style="margin-bottom: 1.5rem;">
                        <InputText id="password" placeholder="Contraseña" type="password" @bind-Value="LoginDTO.Password"
                                   style="width: 100%; padding: 0.75rem; border: none; border-radius: 5px; background: rgba(255, 255, 255, 0.2); color: #fff; font-size: 16px; outline: none;" />
                    </div>
                    <button type="submit" style="width: 100%; padding: 0.75rem; background-color: #0e1e6d; color: white; border: none; border-radius: 25px; font-weight: bold; cursor: pointer; transition: background 0.3s ease;">
                        Iniciar sesión
                    </button>
                </EditForm>

                <!-- Mostrar errores de validación -->
                @if (validationErrors != null && validationErrors.Count > 0)
                {
                    <ul style="margin-top: 1rem; color: #ffdddd; list-style-type: none; padding: 0;">
                        @foreach (var error in validationErrors)
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                }

                <p style="text-align: center; color: #fff; margin-top: 1.5rem;">
                    ¿No tienes una cuenta? <a href="/signup" style="color: #0e1e6d; text-decoration: underline;">Regístrate aquí</a>
                </p>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginDTO LoginDTO = new LoginDTO();
    private List<ValidationFailure> validationErrors = new List<ValidationFailure>();

    private async Task HandleValidSubmit()
    {
        var validationResult = LoginValidator.Validate(LoginDTO);

        if (validationResult.IsValid)
        {
            var result = await AuthService.LoginAsync(LoginDTO);

            if (result.Success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                validationErrors = new List<ValidationFailure>
                {
                    new ValidationFailure("", "Usuario o contraseña incorrectos")
                };
            }
        }
        else
        {
            validationErrors = validationResult.Errors;
        }
    }
}
