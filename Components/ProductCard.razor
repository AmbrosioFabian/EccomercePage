@namespace EccomercePage.Components

@* Imports *@
@using EccomercePage.Api.Interfaces
@using EccomercePage.Data.DTO.CartDTO
@using Microsoft.AspNetCore.Components.Authorization

@inject IRepository<CartReponseDTO, AddProductCartDTO, UpdateCartDTO> _repository
@inject IAuthService _authService

@* Parameters *@
@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string ImageSrc { get; set; } = "Sin información";
    [Parameter] public string ImageAlt { get; set; } = "Sin información";
    [Parameter] public string Name { get; set; } = "Sin información";
    [Parameter] public decimal Price { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
}

<div id="@Id" class="@Class bg-white/30 rounded-lg border-transparent shadow dark:bg-gray-800/30">
    <!-- Cambiado a fondo semi-transparente -->
    <a href="@Id.ToString()">
        <img class="rounded-t-lg p-8" src="@ImageSrc" alt="@ImageAlt" />
    </a>
    <div class="px-5 pb-5">
        <p class="text-xl font-bold text-gray-900 dark:text-white">S/@Price.ToString()</p>

        <a href="#">
            <h5 class="line-clamp-2 my-2 text-sm font-semibold tracking-tight text-gray-900 dark:text-white">@Name</h5>
        </a>

        <div class="flex items-center justify-center">
            <button @onclick="AddProductToCart" class="rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                Añadir al carrito
            </button>
        </div>
    </div>
</div>

<style>
    <!-- Si el texto visualmente pasa las dos líneas, se reemplaza por tres puntos -->
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>

@code {
    // Aquí se puede añadir lógica para el componente
    private AddProductCartDTO cart = new AddProductCartDTO
    {
        CartItems = new List<CartItemDTO>()
    };

    private async Task AddProductToCart()
    {
        var userID = await _authService.GetUserIdAsync();

        if (string.IsNullOrEmpty(userID))
        {
            // Manejar el caso en que el userID es null o vacío 
            Console.WriteLine("User ID is null or empty.");
            return;
        }

        cart.UserId = userID;
        cart.CartItems.Add(new CartItemDTO
        {
            ProductId = Id,
            Quantity = 1
        });

        await _repository.InsertAsync(cart);
    }
}
